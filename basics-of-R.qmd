# Basics of R

## Using R as a calculator

You may use R as a calculator. Some examples are given below.

```{r}
# Addition
5 + 4
```

```{r}
# Subtraction
5 - 4
```

```{r}
# Multiplication
3 * 6
```

```{r}
# Division
10 / 2
```

```{r}
# Exponents
2^3
```

```{r}
# Modulo
5 %% 2
```

### Basic Operators

| **Operator**       | **Description**          |
|:-------------------|:-------------------------|
| **Arithmetic**     |                          |
| **+**              | Addition                 |
| **-**              | Subtraction              |
| **\***             | Multiplication           |
| **/**              | Division                 |
| **\^** or **\*\*** | Exponential              |
| **%%**             | Modulus                  |
| **% / %**          | Integer Division         |
| **Logic**          |                          |
| **\<**             | Less than                |
| **\<=**            | Less than or equal to    |
| **\>**             | Greater than             |
| **\>=**            | Greater than or equal to |
| **==**             | Exactly equal to         |
| **!=**             | Not equal to             |
| **!x**             | Not x                    |
| **x \| y**         | x OR y                   |
| **x & y**          | x AND y                  |

### Order of operators

-   Parenthesis

-   Multiplication / division

-   Addition / subtraction

-   Multiplication has the same importance as division. Similarly, addition and subtraction are at the same level. When we need to decide between the two, we apply the operation that shows first from the left to the right.

-   Use of parentheses makes it easier to perform the correct operation

-   Can you guess the result of the following operation?

    -   8 / 2 \* ( 2 + 2)

```{r}
8 / 2 * ( 2 + 2)
```

```{r}
8 / 2 * 2 + 2
```

```{r}
100 * 2 + 50 / 2
```

```{r}
(100 * 2) + (50 / 2)
```

## Storing information in objects

R lets you save data by storing it inside an R `object`. An object is a name that you can use to call up stored data.

```{r}
a <- 5

a
```

```{r}
a + 2
```

In the example above, we store value of 5 under object `a`. We then call the value stored under `a` and sum it with 2.

Note the use of `<` together with `-` . This representation (`<-`) resembles a backward pointing arrow, and it assigns the value 2 to the object `a`.

```{r}
b_vector <- 1:6
b_vector

## [1] 1 2 3 4 5 6
```

In the above example, we create a vector, whose elements are numbers from 1 to 6 and store it under b_vector.

When you create an object, the object will appear in the environment pane of RStudio (on the top right-hand-side of the R screen). This pane will show you all of the objects you’ve created since opening RStudio.

### Naming of objects

Note the following;

-   An object name cannot start with a number (for example, `2var` or `2_var`)

-   A name cannot use some special symbols, like `^`, `!`, `$`, `@`, `+`, `-`, `/`, or `*` . You may use `_`

-   R is case-sensitive, so `name` and `Name` will refer to different objects

-   R will overwrite any previous information stored in an object without asking your confirmation. So, be careful while making changes.

-   You can see which object names you have already used by calling the function `ls`:

    ```{r}
    ls()

    ## [1] "a"        "b_vector"
    ```

### Naming conventions

You may see the following styles for naming of variables:

-   Camel case

Camel case variable naming is common in Javascipt. However, it is considered as bad practise in R. Try to avoid this kind of naming.

```{r}
bankAccount = 100
```

-   Use of dots

dot is used in variable names by many R users. However, try to avoid this too because base R uses dots in function names (`contrib.url()`) and class names (`data.frame`). Avoiding dot in your variable names will help you avoid confusion, particularly in the initial stages of your learning!

```{r}
bank.account = 100
```

-   Snake case

Use of snake case is considered to be good practice. Try to follow this approach.

```{r}
bank_account = 100
```

Note that you may find different users of R having a preference towards different styles. The recommendations above are from the "Tidyverse style guide", which is available from <https://style.tidyverse.org>.

Start your variable names with a lower case and reserve the capital letter start for function names!

### Removing objects

You will see that the `Environment` window can quickly get over-crowded while working interactively. You may remove the objects that you no longer need. by `rm(object_name )`

```{r}
rm(a)
```

If you have too many objects piled up and you would like to remove them all, then you may type `rm(list = ls())`. This will fully clear your environment.

```{r}
rm(list = ls())
```

### Example of using variables

Let us calculate the module mark for a student who got 65% from coursework and 53% from exam. The weights for the coursework and exam are, respectively, 25% and 75%.

```{r}
# let's calculate module mark for a student
coursework <- 65
exam <- 53
module_mark <- coursework * 0.25 + exam * 0.75

print(module_mark)
```

## Datatypes in R

### Numeric

Decimal numbers and integers are part of the numeric class in R.

#### Decimal (floating point values)

```{r}
decimal_number <- 2.2
```

#### Integer

```{r}
i <- 5
```

### Logical

Boolean values (TRUE and FALSE) are part of the logical class in R. These are written in capital letters.

```{r}
t <- TRUE
f <- FALSE
```

```{r}
t
```

```{r}
f
```

### Characters

Text (string) values are known as characters in R. You may use single or double quotation to create a text (string).

```{r}
message <- "hello all!"
print(message)
```

```{r}
an_other_message <- 'how are you?'
print(an_other_message)
```

### Checking data type classes

We can use the `class()` function to check the data type of a variable:

```{r}
class(decimal_number)
```

```{r}
class(i)
```

```{r}
class(t)
```

```{r}
class(f)
```

```{r}
class(message)
```

## Scripts

You can create a draft of your code as you go by using an R *script*. An R script is just a plain text file that you save R code in. You can open an R script in RStudio using the menu bar:

*File –\> New File –\> R Script*

We will write and edit R code in a script. This will help create a reproducible record of your work. When you’re finished for the day, you can save your script and then use it to rerun your entire analysis the next day.

To save a script, click the scripts pane, and then go to *File –\> Save As* in the menu bar.

-   You can automatically execute a line of code in a script by clicking the Run button on the top right of the pane. R will run whichever line of code your cursor is on.

-   If you have a whole section highlighted, R will run the highlighted code.

-   You can run the entire script by clicking the Source button.

-   You can use Control + Return in your keyboard as a shortcut for the Run button. On Macs, that would be Command + Return.
